# #############################
# Definition of SW infrastructure for the Angular app
# Defines:
# - services
# - networks
# - volumes
# Uses profiles to control what configurations launch, depending on the user-scenario
# ---------------------------
# Dev:
# - frontend
# - auth-backend
# - dashboards-backend-dev
# - ingress-server-dev
# ------------------------------
# Test:
# - frontend
# - auth-backend
# - dashboards-backend
# - dashboardsdb
# - adminer
# - ingress-server
# ##############################
version: "3.8"

networks:
  frontnet:
    name: frontnet
  backnet:
    name: backnet

services:
  # #######################
  # Frontend UI service
  # #######################
  frontend:
    build:
      context: ../frontend
      dockerfile: ./deploy/Dockerfile
      target: development      
    image: sergiunagy/dev-finapp-web-ui
    working_dir: /home/node/app/findash-angular-app
    container_name: dev-finapp-web-ui
    environment:
      - NODE_ENV=development
    volumes:
      - "../frontend/app:/home/node/app"
      # todo: add output folder bindmount for the compiled website
    networks:
      - frontnet
    ports:
      - "8000:4200"
    # todo: add production profile
    profiles: [ "dev", "test"]

    # change to project folder and start serving the app -> use 0.0.0.0 as host since the default is a loopback
    # Note: hot-reload is enabled by default
    command: [ "sh", "-c", "ng serve --port 4200 --host 0.0.0.0" ]

  # #######################
  # Authentication & Authorization service
  # #######################
  auth-backend:
    build:
      context: ../backend/auth
      dockerfile: ./deploy/Dockerfile
      target: development
    image: sergiunagy/dev-finapp-auth
    container_name: dev-finapp-auth
    # mount volumes if you want hot reloads
    volumes:
      - "../backend/auth/src:/home/app"
    networks:
      backnet:
        aliases:
          - authentication-server
    environment:
      FINNHUB_APIKEY: "ck47m71r01qus81pr1ogck47m71r01qus81pr1p0"
      FRONTEND_HOST_DEV: "http://localhost:8000"
      FRONTEND_HOST: "http://localhost:8080"

    profiles: [ "dev", "test" ]

    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "5000", "--reload"]
  # #######################
  # Dashboards service
  # #######################
  dashboards-backend-dev:
    build:
      context: ../backend/dashboards
      dockerfile: ./deploy/Dockerfile
      target: development
      # no_cache: true
    image: sergiunb/dev-finapp-dashboards
    working_dir: /home/node/app/dashboards
    container_name: dev-finapp-dashboards
    environment:
      - NODE_ENV=development
      - ENV_LOCATION=./environments
      - DB_HOST='datastore-server'
      - DB_PORT=3306
      - DB_USER='root'
      - DB_PASS='root'
      - DB_NAME=dashboards.sqlite
      - DB_TYPE=sqlite
      - DB_SYNC_FLAG=true

    volumes:
      - "../backend/dashboards/app:/home/node/app"
    networks:
      backnet:
        aliases:
          - dashboards-server
          
    # Note: hot-reload is enabled by default
    command:
      [
        "sh",
        "-c",
        "npm run start:dev --port 5000 --host 0.0.0.0"
      ]

    profiles: [ "dev" ]

  dashboards-backend:
    image: sergiunb/dev-finapp-dashboards
    working_dir: /home/node/app/dashboards
    container_name: dev-finapp-dashboards
    environment:
      - NODE_ENV=test
      - ENV_LOCATION=./environments
      - DB_HOST=dashboards-store-server
      - DB_PORT=5432
      - DB_USER=finadmin
      - DB_PASS=finpas357
      - DB_NAME=dashboards
      - DB_TYPE=postgres
      - DB_SYNC_FLAG=true

    volumes:
      - "../backend/dashboards/app:/home/node/app"
    networks:
      backnet:
        aliases:
          - dashboards-server
          
    # Note: hot-reload is enabled by default
    command:
      [
        "sh",
        "-c",
        "npm run start:dev --port 5000 --host 0.0.0.0"
      ]

    profiles: [ "test"]

  # #######################
  # Dashboards Storage service 
  # #######################
  dashboardsdb:
    image: postgres # sergiunagy/finapp-dashboards-store
    container_name: dev-finapp-dashboards-store
    environment:
      POSTGRES_PASSWORD: finpas357
      POSTGRES_USER: finadmin
      POSTGRES_DB: dashboards
    networks:
      backnet:
        aliases:
          - dashboards-store-server

    restart: always
    profiles: ["test"]

  adminer:
    image: adminer
    restart: always
    networks:
      - backnet
    ports:
      - 8050:8080
    profiles: ["test"]
      
  # #######################
  # Forecasting service
  # #######################
  forecasting-backend:
    build:
      context: ../backend/forecaster
      dockerfile: ./deploy/Dockerfile
    image: sergiunagy/dev-finapp-forecaster
    container_name: dev-finapp-forecaster
    ports:
    - 5000:5000
    # mount volumes if you want hot reloads
    volumes:
      - "../backend/forecaster/src:/home/app"
    networks:
      backnet:
        aliases:
          - forecast-server
    environment:
      FRONTEND_HOST_DEV: "http://localhost:8000"
      FRONTEND_HOST: "http://localhost:8080"
      
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "5000", "--reload"]


  # #######################
  # Ingress service
  # we need 2 profiles because some prerequisite services also have different profiles
  # #######################
  ingress-server-dev:
    privileged: true
    build:
      context: ../backend/ingress
      dockerfile: ./deploy/Dockerfile
    image: sergiunagy/dev-finapp-ingress
    container_name: dev-finapp-ingress
    # map any static files you want to serve here
    volumes:
      - "../backend/ingress/config:/etc/nginx/conf.d" # map configuration files here
    networks:
      - backnet
    # this is a proxy service and is bound to the localhost network stack
    ports:
      - "8090:80"
    # the service waits for authorization and the dashboards services to be up because it requires them when checking proxy paths  
    depends_on:
      - auth-backend
      - dashboards-backend-dev
      - forecasting-backend
    # enable proper logging and allow DELETE and PUT through the WAF
    environment:
      - MODSEC_AUDIT_LOG="/var/log/modsec_audit.log"
      - ALLOWED_METHODS=GET HEAD POST OPTIONS DELETE PUT
    
    profiles: ["dev"]

  ingress-server:
    privileged: true
    build:
      context: ../backend/ingress
      dockerfile: ./deploy/Dockerfile
      target: development
    image: dev-finapp-ingress
    container_name: dev-finapp-ingress
    # map any static files you want to serve here
    volumes:
      - "../backend/ingress/config:/etc/nginx/conf.d" # map configuration files here
    networks:
      - backnet
    # this is a proxy service and is bound to the localhost network stack
    ports:
      - "8090:80"
    # the service waits for authorization and the dashboards services to be up because it requires them when checking proxy paths  
    depends_on:
      - auth-backend
      - dashboards-backend
    # enable proper logging and allow DELETE and PUT through the WAF
    environment:
      - MODSEC_AUDIT_LOG="/var/log/modsec_audit.log"
      - ALLOWED_METHODS=GET HEAD POST OPTIONS DELETE PUT
    
    profiles: ["test"]
      
    # NO PROFILES - ALWAYS ENABLED
